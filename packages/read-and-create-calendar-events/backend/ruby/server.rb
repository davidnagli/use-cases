# frozen_string_literal: true

require 'sinatra'
require 'sinatra/cross_origin'
require 'nylas'
require 'dotenv'

Dotenv.load('.env', '../../../../.env')

# enable CORS
configure do
  enable :cross_origin
end

# explicitly respond to preflight requests
options '*' do
  response.headers['Allow'] = 'HEAD,GET,PUT,POST,DELETE,OPTIONS'

  response.headers['Access-Control-Allow-Headers'] =
    'X-Requested-With, X-HTTP-Method-Override, Content-Type, Cache-Control, Accept, Authorization'

  200
end

# Create a global handler for all exceptions
set :environment, :production

error do
  content_type :json
  status 400 # or whatever

  e = env['sinatra.error']
  {:result => 'error', :message => e.message}.to_json
end


# The port that the backend server will run on
set :port, 9000

# Initialize the Nylas API client using the client id and secret specified in the .env file
nylas = Nylas::Client.new(api_key: ENV.fetch('NYLAS_API_KEY'), host: ENV.fetch('NYLAS_API_SERVER'))


# # Before we start our backend, we should register our frontend
# # as a redirect URI to ensure the auth completes
CLIENT_URI = ENV.fetch('CLIENT_URI') { "http://localhost:#{ENV.fetch('PORT', 3000)}" }

redirect_uris, _request_ids = nylas.applications.redirect_uris.list

if redirect_uris.find { |request_uri,| request_uri[:url] == CLIENT_URI }
  p 'Application redirect URI already exists'
else
  redirect_uri, _request_id = nylas.applications.redirect_uris.create(
    request_body: {
      url: CLIENT_URI,
      platform: 'web'
    }
  )
  p "Application redirect URI registered: #{redirect_uri[:id]}"
end


##
# Generates a Nylas Hosted Authentication URL with the given arguments.
# The endpoint also uses the app level constants CLIENT_URI to build the URL.
#
# This endpoint is a POST request and accepts the following parameters:
#
# Request Body:
#     success_url: The URL to redirect the user to after successful authorization.
#     email_address: The email address of the user who is authorizing the app.
#
# Returns the generated authorization URL.
post '/nylas/generate-auth-url' do
  request_body = JSON.parse(request.body.read)

  p "Client URI #{CLIENT_URI}"

  # Use the SDK method to generate a Nylas Hosted Authentication URL
  auth_url = nylas.auth.url_for_oauth2({
                                                                                                         redirect_uri: CLIENT_URI,
                                                                                                         login_hint: request_body['emailAddress'],
                                                                                                         client_id: ENV.fetch('NYLAS_CLIENT_ID')
  })

  content_type 'application/json'
  return {
    auth_url: auth_url
  }.to_json
end

##
# Exchanges an authorization code for an access token.
# Once the access token is generated, it can be used to make API calls on behalf of the user.
# For this example, we store the access token in our mock database.
#
# This endpoint is a POST request and accepts the following parameters:
#
# Request Body:
#     token: The authorization code generated by the Nylas Hosted Authentication.
#
# Returns a JSON object with the following information about the user:
#     id: The identifier of the user in the database.
#     emailAddress: The email address of the user.
get '/nylas/exchange-auth-code' do
  code = params[:code]
  error = params[:error]
  error_description = params[:error_description]

  if error
    content_type 'application/json'
    return {
      message: error
    }.to_json
  end

  grant, _request_id = nylas.auth.exchange_code_for_token({
                                                            code: code,
                                                            redirect_uri: CLIENT_URI,
                                                            client_id: ENV.fetch('NYLAS_CLIENT_ID'),
                                                            client_secret: ENV.fetch('NYLAS_CLIENT_SECRET')
                                                          })

  p "Grant #{grant} with a request id of #{_request_id}"

  content_type 'application/json'
  return {
    grant_id: ""
  }.to_json
end

##
# Retrieves all events from a calendar.
#
# This endpoint is a GET request and accepts the following parameters:
#
# Query Parameters:
#     calendarId: The ID of the calendar to retrieve events from.
#     startsAfter: The start time of the events to retrieve.
#     endsBefore: The end time of the events to retrieve.
#     limit: The maximum number of events to retrieve.
#
# Returns a JSON array of all events from the given calendar.
# See our docs for more information on the Event object.
# https://developer.nylas.com/docs/api/#tag--Events
get '/nylas/:grant_id/read-events' do
  grant_id = params['grant_id']

  calendar_id = params['calendarId']
  starts_after = params['startsAfter']
  ends_before = params['endsBefore']
  limit = params['limit'] ? params['limit'] : 20

  unless calendar_id
    return halt 400, { 'Content-Type' => 'application/json' }, {
      message: "Calendar ID is required"
    }
  end

  # Use the SDK method chaining to retrieve all events from the given calendar
  query_params = {
    calendar_id: calendar_id
  }

  if starts_after
    query_params['starts'] = starts_after
  end

  if ends_before
    query_params['ends'] = ends_before
  end

  events, _request_ids = nylas.events.list(identifier: grant_id, query_params: query_params)

  content_type 'application/json'
  return {
    events: events
  }.to_json
end


##
# Retrieves all calendars for the authenticated user.
#
# This endpoint is a GET request and accepts no parameters.
#
# Returns a JSON array of all calendars for the authenticated user.
# See our docs for more information about the calendar object.
# https://developer.nylas.com/docs/api/#tag--Calendar
get '/nylas/:grant_id/read-calendars' do
  grant_id = params['grant_id']

  calendars, _request_id = nylas.calendars.list(identifier: grant_id)

  content_type 'application/json'
  return {
    calendars: calendars
  }.to_json
end

# ##
# # Creates an event in the authenticated user's calendar.
# #
# # This endpoint is a POST request and accepts the following parameters in the request body:
# #
# # Request Body:
# #     calendarId: The identifier of the calendar to create the event in.
# #     title: The title of the event.
# #     description: The description of the event.
# #     startTime: The start time of the event.
# #     endTime: The end time of the event.
# #     participants: A comma separated list of email addresses of the participants of the event.
# #
# # Checks if the required parameters are present in the request body.
# # Creates an event object and sets the inputted parameters.
# # Saves the event object to the Nylas API.
# #
# # Returns the event object.
# # See our docs for more information on the Event object.
# # https://developer.nylas.com/docs/api/#tag--Events
post '/nylas/:grant_id/create-event' do
  grant_id = params['grant_id']

  request_body = JSON.parse(request.body.read)

  if request_body['calendarId'].nil? ||
     request_body['title'].nil? ||
     request_body['startTime'].nil? ||
     request_body['endTime'].nil?
    halt 400,
         {'Content-type': 'application/json'}, { message: 'Missing required fields: calendarId, title, starTime or endTime' }
  end

  participants = if request_body['participants'].nil?
                   []
                 else
                   request_body['participants'].split(/,\s*/)
                 end

  # use the SDK method to create an event object
  event, _request_id = nylas.events.create(
    identifier: grant_id,
    query_params: {
      calendar_id: request_body['calendarId'],
    },
    request_body: {
      title: request_body['title'],
      description: request_body['description'],
      when: {
        start_time: request_body['startTime'].to_i,
        end_time: request_body['endTime'].to_i
      },
      participants: participants.map { |email| { email: email } }
    }
  )

  content_type 'application/json'
  event.to_json
end


delete '/nylas/:grant_id/delete-grant' do
  grant_id = params['grant_id']

  nylas.auth(ENV.fetch('NYLAS_CLIENT_ID'), ENV.fetch('NYLAS_CLIENT_SECRET')).grants.destroy(object_id: grant_id)

  content_type 'application/json'
  return {
    success: true
  }.to_json
end